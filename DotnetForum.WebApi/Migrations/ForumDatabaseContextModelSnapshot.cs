// <auto-generated />
using System;
using DotnetForum.WebApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotnetForum.WebApi.Migrations
{
    [DbContext(typeof(ForumDatabaseContext))]
    partial class ForumDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("DotnetForum.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasColumnName("file_content_type")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttachmentId");

                    b.HasIndex("PostId");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("DotnetForum.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("categories");
                });

            modelBuilder.Entity("DotnetForum.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("DotnetForum.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .HasColumnType("TEXT");

                    b.HasKey("PostId", "TagName");

                    b.HasIndex("TagName");

                    b.ToTable("posts_tags");
                });

            modelBuilder.Entity("DotnetForum.Models.Tag", b =>
                {
                    b.Property<string>("TagName")
                        .HasColumnName("tag_name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.HasKey("TagName");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("DotnetForum.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("DotnetForum.Models.Attachment", b =>
                {
                    b.HasOne("DotnetForum.Models.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetForum.Models.Post", b =>
                {
                    b.HasOne("DotnetForum.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetForum.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetForum.Models.PostTag", b =>
                {
                    b.HasOne("DotnetForum.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetForum.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
