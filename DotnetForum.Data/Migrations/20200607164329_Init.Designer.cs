// <auto-generated />
using System;
using DotnetForum.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotnetForum.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200607164329_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("DotnetForum.Data.Models.Agreement", b =>
                {
                    b.Property<int>("AgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDateTime")
                        .HasColumnName("effective_datetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LanguageRegion")
                        .IsRequired()
                        .HasColumnName("lang_region")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Statements")
                        .IsRequired()
                        .HasColumnName("statements")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("INTEGER");

                    b.HasKey("AgreementId");

                    b.ToTable("agreements");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasColumnName("file_content_type")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttachmentId");

                    b.HasIndex("PostId");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Forum", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("image_url")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("forum_name")
                        .HasColumnType("TEXT");

                    b.HasKey("ForumId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("forums");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnName("inactive_datetime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("is_admin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberDescription")
                        .IsRequired()
                        .HasColumnName("member_description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnName("member_since")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnName("profile_image_url")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnName("rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.MemberAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgreementId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("MemberId");

                    b.ToTable("member_agreements");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FromId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ToId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnName("archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Downvote")
                        .HasColumnName("downvote")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<int>("Upvote")
                        .HasColumnName("upvote")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostId");

                    b.HasIndex("ForumId");

                    b.HasIndex("MemberId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .HasColumnType("TEXT");

                    b.HasKey("PostId", "TagName");

                    b.HasIndex("TagName");

                    b.ToTable("posts_tags");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Downvote")
                        .HasColumnName("downvote")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Upvote")
                        .HasColumnName("upvote")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReplyId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId");

                    b.ToTable("replies");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Tag", b =>
                {
                    b.Property<string>("TagName")
                        .HasColumnName("tag_name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("created_datetime_utc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnName("last_modified_datetime_utc")
                        .HasColumnType("TEXT");

                    b.HasKey("TagName");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Attachment", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetForum.Data.Models.MemberAgreement", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetForum.Data.Models.Member", "Member")
                        .WithMany("MemberAgreements")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Message", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Member", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("DotnetForum.Data.Models.Member", "To")
                        .WithMany()
                        .HasForeignKey("ToId");
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Post", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetForum.Data.Models.Member", "Member")
                        .WithMany("Posts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetForum.Data.Models.PostTag", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetForum.Data.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetForum.Data.Models.Reply", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetForum.Data.Models.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetForum.Data.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DotnetForum.Data.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
